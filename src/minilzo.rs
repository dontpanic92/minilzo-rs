/* automatically generated by rust-bindgen */
#![allow(warnings)]

pub(crate) const LZO1X_1_MEM_COMPRESS: usize = 131072;
pub(crate) const __MINILZO_H_INCLUDED: u32 = 1;
pub(crate) const MINILZO_VERSION: u32 = 8352;
pub(crate) const _LIBC_LIMITS_H_: u32 = 1;
pub(crate) const _FEATURES_H: u32 = 1;
pub(crate) const _DEFAULT_SOURCE: u32 = 1;
pub(crate) const __GLIBC_USE_ISOC2X: u32 = 0;
pub(crate) const __USE_ISOC11: u32 = 1;
pub(crate) const __USE_ISOC99: u32 = 1;
pub(crate) const __USE_ISOC95: u32 = 1;
pub(crate) const __USE_POSIX_IMPLICITLY: u32 = 1;
pub(crate) const _POSIX_SOURCE: u32 = 1;
pub(crate) const _POSIX_C_SOURCE: u32 = 200809;
pub(crate) const __USE_POSIX: u32 = 1;
pub(crate) const __USE_POSIX2: u32 = 1;
pub(crate) const __USE_POSIX199309: u32 = 1;
pub(crate) const __USE_POSIX199506: u32 = 1;
pub(crate) const __USE_XOPEN2K: u32 = 1;
pub(crate) const __USE_XOPEN2K8: u32 = 1;
pub(crate) const _ATFILE_SOURCE: u32 = 1;
pub(crate) const __USE_MISC: u32 = 1;
pub(crate) const __USE_ATFILE: u32 = 1;
pub(crate) const __USE_FORTIFY_LEVEL: u32 = 0;
pub(crate) const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub(crate) const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub(crate) const _STDC_PREDEF_H: u32 = 1;
pub(crate) const __STDC_IEC_559__: u32 = 1;
pub(crate) const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub(crate) const __STDC_ISO_10646__: u32 = 201706;
pub(crate) const __GNU_LIBRARY__: u32 = 6;
pub(crate) const __GLIBC__: u32 = 2;
pub(crate) const __GLIBC_MINOR__: u32 = 31;
pub(crate) const _SYS_CDEFS_H: u32 = 1;
pub(crate) const __glibc_c99_flexarr_available: u32 = 1;
pub(crate) const __WORDSIZE: u32 = 64;
pub(crate) const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub(crate) const __SYSCALL_WORDSIZE: u32 = 64;
pub(crate) const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub(crate) const __HAVE_GENERIC_SELECTION: u32 = 1;
pub(crate) const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub(crate) const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub(crate) const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub(crate) const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub(crate) const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub(crate) const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub(crate) const MB_LEN_MAX: u32 = 16;
pub(crate) const _BITS_POSIX1_LIM_H: u32 = 1;
pub(crate) const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub(crate) const _POSIX_AIO_MAX: u32 = 1;
pub(crate) const _POSIX_ARG_MAX: u32 = 4096;
pub(crate) const _POSIX_CHILD_MAX: u32 = 25;
pub(crate) const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub(crate) const _POSIX_HOST_NAME_MAX: u32 = 255;
pub(crate) const _POSIX_LINK_MAX: u32 = 8;
pub(crate) const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub(crate) const _POSIX_MAX_CANON: u32 = 255;
pub(crate) const _POSIX_MAX_INPUT: u32 = 255;
pub(crate) const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub(crate) const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub(crate) const _POSIX_NAME_MAX: u32 = 14;
pub(crate) const _POSIX_NGROUPS_MAX: u32 = 8;
pub(crate) const _POSIX_OPEN_MAX: u32 = 20;
pub(crate) const _POSIX_PATH_MAX: u32 = 256;
pub(crate) const _POSIX_PIPE_BUF: u32 = 512;
pub(crate) const _POSIX_RE_DUP_MAX: u32 = 255;
pub(crate) const _POSIX_RTSIG_MAX: u32 = 8;
pub(crate) const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub(crate) const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub(crate) const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub(crate) const _POSIX_SSIZE_MAX: u32 = 32767;
pub(crate) const _POSIX_STREAM_MAX: u32 = 8;
pub(crate) const _POSIX_SYMLINK_MAX: u32 = 255;
pub(crate) const _POSIX_SYMLOOP_MAX: u32 = 8;
pub(crate) const _POSIX_TIMER_MAX: u32 = 32;
pub(crate) const _POSIX_TTY_NAME_MAX: u32 = 9;
pub(crate) const _POSIX_TZNAME_MAX: u32 = 6;
pub(crate) const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub(crate) const NR_OPEN: u32 = 1024;
pub(crate) const NGROUPS_MAX: u32 = 65536;
pub(crate) const ARG_MAX: u32 = 131072;
pub(crate) const LINK_MAX: u32 = 127;
pub(crate) const MAX_CANON: u32 = 255;
pub(crate) const MAX_INPUT: u32 = 255;
pub(crate) const NAME_MAX: u32 = 255;
pub(crate) const PATH_MAX: u32 = 4096;
pub(crate) const PIPE_BUF: u32 = 4096;
pub(crate) const XATTR_NAME_MAX: u32 = 255;
pub(crate) const XATTR_SIZE_MAX: u32 = 65536;
pub(crate) const XATTR_LIST_MAX: u32 = 65536;
pub(crate) const RTSIG_MAX: u32 = 32;
pub(crate) const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub(crate) const PTHREAD_KEYS_MAX: u32 = 1024;
pub(crate) const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub(crate) const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub(crate) const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub(crate) const AIO_PRIO_DELTA_MAX: u32 = 20;
pub(crate) const PTHREAD_STACK_MIN: u32 = 16384;
pub(crate) const DELAYTIMER_MAX: u32 = 2147483647;
pub(crate) const TTY_NAME_MAX: u32 = 32;
pub(crate) const LOGIN_NAME_MAX: u32 = 256;
pub(crate) const HOST_NAME_MAX: u32 = 64;
pub(crate) const MQ_PRIO_MAX: u32 = 32768;
pub(crate) const SEM_VALUE_MAX: u32 = 2147483647;
pub(crate) const _BITS_POSIX2_LIM_H: u32 = 1;
pub(crate) const _POSIX2_BC_BASE_MAX: u32 = 99;
pub(crate) const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub(crate) const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub(crate) const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub(crate) const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub(crate) const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub(crate) const _POSIX2_LINE_MAX: u32 = 2048;
pub(crate) const _POSIX2_RE_DUP_MAX: u32 = 255;
pub(crate) const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub(crate) const BC_BASE_MAX: u32 = 99;
pub(crate) const BC_DIM_MAX: u32 = 2048;
pub(crate) const BC_SCALE_MAX: u32 = 99;
pub(crate) const BC_STRING_MAX: u32 = 1000;
pub(crate) const COLL_WEIGHTS_MAX: u32 = 255;
pub(crate) const EXPR_NEST_MAX: u32 = 32;
pub(crate) const LINE_MAX: u32 = 2048;
pub(crate) const CHARCLASS_NAME_MAX: u32 = 2048;
pub(crate) const RE_DUP_MAX: u32 = 32767;
pub(crate) const __LZODEFS_H_INCLUDED: u32 = 1;
pub(crate) const _CRT_NONSTDC_NO_DEPRECATE: u32 = 1;
pub(crate) const _CRT_NONSTDC_NO_WARNINGS: u32 = 1;
pub(crate) const _CRT_SECURE_NO_DEPRECATE: u32 = 1;
pub(crate) const _CRT_SECURE_NO_WARNINGS: u32 = 1;
pub(crate) const LZO_0xffffUL: u32 = 65535;
pub(crate) const LZO_0xffffffffUL: u32 = 4294967295;
pub(crate) const LZO_0xffffL: u32 = 65535;
pub(crate) const LZO_0xffffffffL: u32 = 4294967295;
pub(crate) const LZO_CFG_USE_COUNTER: u32 = 1;
pub(crate) const LZO_OS_POSIX: u32 = 1;
pub(crate) const LZO_INFO_OS: &'static [u8; 6usize] = b"posix\0";
pub(crate) const LZO_OS_POSIX_LINUX: u32 = 1;
pub(crate) const LZO_INFO_OS_POSIX: &'static [u8; 6usize] = b"linux\0";
pub(crate) const LZO_CC_CLANG_VENDOR_LLVM: u32 = 1;
pub(crate) const LZO_INFO_CC: &'static [u8; 6usize] = b"clang\0";
pub(crate) const LZO_ARCH_AMD64: u32 = 1;
pub(crate) const LZO_INFO_ARCH: &'static [u8; 6usize] = b"amd64\0";
pub(crate) const LZO_ARCH_X64: u32 = 1;
pub(crate) const LZO_TARGET_FEATURE_SSE2: u32 = 1;
pub(crate) const LZO_MM_FLAT: u32 = 1;
pub(crate) const LZO_INFO_MM: &'static [u8; 5usize] = b"flat\0";
pub(crate) const LZO_CFG_USE_NEW_STYLE_CASTS: u32 = 0;
pub(crate) const __lzo_HAVE_inline: u32 = 1;
pub(crate) const __lzo_HAVE_forceinline: u32 = 1;
pub(crate) const __lzo_HAVE_noinline: u32 = 1;
pub(crate) const __lzo_HAVE_c99_extern_inline: u32 = 1;
pub(crate) const __lzo_HAVE_may_alias: u32 = 1;
pub(crate) const __lzo_HAVE_noreturn: u32 = 1;
pub(crate) const __lzo_HAVE_nothrow: u32 = 1;
pub(crate) const __lzo_HAVE_restrict: u32 = 1;
pub(crate) const __lzo_HAVE_alignof: u32 = 1;
pub(crate) const __lzo_HAVE_constructor: u32 = 1;
pub(crate) const __lzo_HAVE_destructor: u32 = 1;
pub(crate) const __lzo_HAVE_likely: u32 = 1;
pub(crate) const __lzo_HAVE_unlikely: u32 = 1;
pub(crate) const __lzo_HAVE_unreachable: u32 = 1;
pub(crate) const LZO_SIZEOF_CHAR: u32 = 1;
pub(crate) const LZO_WORDSIZE: u32 = 8;
pub(crate) const LZO_ABI_LITTLE_ENDIAN: u32 = 1;
pub(crate) const LZO_INFO_ABI_ENDIAN: &'static [u8; 3usize] = b"le\0";
pub(crate) const LZO_ABI_LP64: u32 = 1;
pub(crate) const LZO_INFO_ABI_PM: &'static [u8; 5usize] = b"lp64\0";
pub(crate) const LZO_LIBC_GLIBC: u32 = 139008;
pub(crate) const LZO_INFO_LIBC: &'static [u8; 6usize] = b"glibc\0";
pub(crate) const LZO_ASM_SYNTAX_GNUC: u32 = 1;
pub(crate) const LZO_OPT_AVOID_INT_INDEX: u32 = 1;
pub(crate) const LZO_OPT_AVOID_UINT_INDEX: u32 = 1;
pub(crate) const LZO_OPT_UNALIGNED16: u32 = 1;
pub(crate) const LZO_OPT_UNALIGNED32: u32 = 1;
pub(crate) const LZO_OPT_UNALIGNED64: u32 = 1;
pub(crate) const __LZO_INFOSTR_MM: &'static [u8; 1usize] = b"\0";
pub(crate) const __LZO_INFOSTR_PM: &'static [u8; 6usize] = b".lp64\0";
pub(crate) const __LZO_INFOSTR_ENDIAN: &'static [u8; 4usize] = b".le\0";
pub(crate) const __LZO_INFOSTR_OSNAME: &'static [u8; 12usize] = b"posix.linux\0";
pub(crate) const __LZO_INFOSTR_LIBC: &'static [u8; 7usize] = b".glibc\0";
pub(crate) const __LZO_INFOSTR_CCVER: &'static [u8; 2usize] = b" \0";
pub(crate) const LZO_INFO_STRING: &'static [u8; 39usize] =
    b"amd64.lp64.le posix.linux.glibc clang \0";
pub(crate) const LZO_TYPEOF_CHAR: u32 = 1;
pub(crate) const LZO_TYPEOF_SHORT: u32 = 2;
pub(crate) const LZO_TYPEOF_INT: u32 = 3;
pub(crate) const LZO_TYPEOF_LONG: u32 = 4;
pub(crate) const LZO_TYPEOF_LONG_LONG: u32 = 5;
pub(crate) const LZO_TYPEOF___INT8: u32 = 17;
pub(crate) const LZO_TYPEOF___INT16: u32 = 18;
pub(crate) const LZO_TYPEOF___INT32: u32 = 19;
pub(crate) const LZO_TYPEOF___INT64: u32 = 20;
pub(crate) const LZO_TYPEOF___INT128: u32 = 21;
pub(crate) const LZO_TYPEOF___INT256: u32 = 22;
pub(crate) const LZO_TYPEOF___MODE_QI: u32 = 33;
pub(crate) const LZO_TYPEOF___MODE_HI: u32 = 34;
pub(crate) const LZO_TYPEOF___MODE_SI: u32 = 35;
pub(crate) const LZO_TYPEOF___MODE_DI: u32 = 36;
pub(crate) const LZO_TYPEOF___MODE_TI: u32 = 37;
pub(crate) const LZO_TYPEOF_CHAR_P: u32 = 129;
pub(crate) const LZO_TYPEOF_LZO_INT16E_T: u32 = 2;
pub(crate) const LZO_SIZEOF_LZO_INT16E_T: u32 = 2;
pub(crate) const LZO_TYPEOF_LZO_INT32E_T: u32 = 3;
pub(crate) const LZO_SIZEOF_LZO_INT32E_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_INT64E_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT64E_T: u32 = 8;
pub(crate) const LZO_SIZEOF_LZO_INT32L_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_INT32L_T: u32 = 3;
pub(crate) const LZO_SIZEOF_LZO_INT64L_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT64L_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT32F_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT32F_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT64F_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT64F_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_INTPTR_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_WORD_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT8_T: u32 = 1;
pub(crate) const LZO_TYPEOF_LZO_INT8_T: u32 = 1;
pub(crate) const LZO_SIZEOF_LZO_INT16_T: u32 = 2;
pub(crate) const LZO_TYPEOF_LZO_INT16_T: u32 = 2;
pub(crate) const LZO_SIZEOF_LZO_INT32_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_INT32_T: u32 = 3;
pub(crate) const LZO_SIZEOF_LZO_INT64_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT64_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT_LEAST32_T: u32 = 4;
pub(crate) const LZO_TYPEOF_LZO_INT_LEAST32_T: u32 = 3;
pub(crate) const LZO_SIZEOF_LZO_INT_LEAST64_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT_LEAST64_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT_FAST32_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT_FAST32_T: u32 = 4;
pub(crate) const LZO_SIZEOF_LZO_INT_FAST64_T: u32 = 8;
pub(crate) const LZO_TYPEOF_LZO_INT_FAST64_T: u32 = 4;
pub(crate) const __LZOCONF_H_INCLUDED: u32 = 1;
pub(crate) const LZO_VERSION: u32 = 8352;
pub(crate) const LZO_VERSION_STRING: &'static [u8; 5usize] = b"2.10\0";
pub(crate) const LZO_VERSION_DATE: &'static [u8; 12usize] = b"Mar 01 2017\0";
pub(crate) const LZO_TYPEOF_LZO_INT: u32 = 4;
pub(crate) const LZO_E_OK: u32 = 0;
pub(crate) const LZO_E_ERROR: i32 = -1;
pub(crate) const LZO_E_OUT_OF_MEMORY: i32 = -2;
pub(crate) const LZO_E_NOT_COMPRESSIBLE: i32 = -3;
pub(crate) const LZO_E_INPUT_OVERRUN: i32 = -4;
pub(crate) const LZO_E_OUTPUT_OVERRUN: i32 = -5;
pub(crate) const LZO_E_LOOKBEHIND_OVERRUN: i32 = -6;
pub(crate) const LZO_E_EOF_NOT_FOUND: i32 = -7;
pub(crate) const LZO_E_INPUT_NOT_CONSUMED: i32 = -8;
pub(crate) const LZO_E_NOT_YET_IMPLEMENTED: i32 = -9;
pub(crate) const LZO_E_INVALID_ARGUMENT: i32 = -10;
pub(crate) const LZO_E_INVALID_ALIGNMENT: i32 = -11;
pub(crate) const LZO_E_OUTPUT_NOT_CONSUMED: i32 = -12;
pub(crate) const LZO_E_INTERNAL_ERROR: i32 = -99;
pub(crate) const LZO1X_MEM_DECOMPRESS: u32 = 0;
pub(crate) type size_t = ::std::os::raw::c_ulong;
pub(crate) type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub(crate) struct max_align_t {
    pub(crate) __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub(crate) __bindgen_padding_0: u64,
    pub(crate) __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub(crate) static mut lzo_cta__0: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__1: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__2: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__3: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__4: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__5: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__6: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__7: [::std::os::raw::c_int; 1usize];
}
pub(crate) type lzo_llong_t__ = ::std::os::raw::c_longlong;
pub(crate) type lzo_ullong_t__ = ::std::os::raw::c_ulonglong;
extern "C" {
    pub(crate) static mut lzo_cta__8: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__9: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__10: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__11: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__12: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__13: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__14: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__15: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__16: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__17: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__18: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__19: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__20: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__21: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__22: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__23: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__24: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__25: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__26: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__27: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__28: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__29: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__30: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__31: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__32: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__33: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__34: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__35: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__36: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__37: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__38: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__39: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__40: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__41: [::std::os::raw::c_int; 1usize];
}
pub(crate) type lzo_uint = ::std::os::raw::c_ulong;
pub(crate) type lzo_int = ::std::os::raw::c_long;
pub(crate) type lzo_bool = ::std::os::raw::c_int;
extern "C" {
    pub(crate) static mut lzo_cta__42: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__43: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__44: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__45: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__46: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__47: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__48: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__49: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__50: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__51: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__52: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__53: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__54: [::std::os::raw::c_int; 1usize];
}
extern "C" {
    pub(crate) static mut lzo_cta__55: [::std::os::raw::c_int; 1usize];
}
pub(crate) type lzo_compress_t = ::std::option::Option<
    unsafe extern "C" fn(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type lzo_decompress_t = ::std::option::Option<
    unsafe extern "C" fn(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type lzo_optimize_t = ::std::option::Option<
    unsafe extern "C" fn(
        src: *mut ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type lzo_compress_dict_t = ::std::option::Option<
    unsafe extern "C" fn(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
        dict: *const ::std::os::raw::c_uchar,
        dict_len: lzo_uint,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type lzo_decompress_dict_t = ::std::option::Option<
    unsafe extern "C" fn(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
        dict: *const ::std::os::raw::c_uchar,
        dict_len: lzo_uint,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type lzo_alloc_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut lzo_callback_t,
        items: lzo_uint,
        size: lzo_uint,
    ) -> *mut ::std::os::raw::c_void,
>;
pub(crate) type lzo_free_func_t = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut lzo_callback_t, ptr: *mut ::std::os::raw::c_void),
>;
pub(crate) type lzo_progress_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut lzo_callback_t,
        arg2: lzo_uint,
        arg3: lzo_uint,
        arg4: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct lzo_callback_t {
    pub(crate) nalloc: lzo_alloc_func_t,
    pub(crate) nfree: lzo_free_func_t,
    pub(crate) nprogress: lzo_progress_func_t,
    pub(crate) user1: *mut ::std::os::raw::c_void,
    pub(crate) user2: lzo_uint,
    pub(crate) user3: lzo_uint,
}
#[test]
fn bindgen_test_layout_lzo_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<lzo_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(lzo_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lzo_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lzo_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).nalloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).nfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(nfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).nprogress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(nprogress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).user1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(user1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).user2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(user2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_callback_t>())).user3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_callback_t),
            "::",
            stringify!(user3)
        )
    );
}
extern "C" {
    pub(crate) fn __lzo_init_v2(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn lzo_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub(crate) fn lzo_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn lzo_version_date() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn _lzo_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn _lzo_version_date() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn lzo_memcmp(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        len: lzo_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn lzo_memcpy(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: lzo_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub(crate) fn lzo_memmove(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: lzo_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub(crate) fn lzo_memset(
        buf: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: lzo_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub(crate) fn lzo_adler32(
        c: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_uchar,
        len: lzo_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub(crate) fn lzo_crc32(
        c: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_uchar,
        len: lzo_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub(crate) fn lzo_get_crc32_table() -> *const ::std::os::raw::c_uint;
}
extern "C" {
    pub(crate) fn _lzo_config_check() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union lzo_align_t {
    pub(crate) a00: *mut ::std::os::raw::c_void,
    pub(crate) a01: *mut ::std::os::raw::c_uchar,
    pub(crate) a02: lzo_uint,
    pub(crate) a03: lzo_uint,
    pub(crate) a04: ::std::os::raw::c_ulong,
    pub(crate) a05: *mut ::std::os::raw::c_void,
    pub(crate) a06: *mut ::std::os::raw::c_uchar,
    pub(crate) a07: ::std::os::raw::c_ulong,
    pub(crate) a08: size_t,
    pub(crate) a09: isize,
    pub(crate) a10: ::std::os::raw::c_ulong,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_lzo_align_t() {
    assert_eq!(
        ::std::mem::size_of::<lzo_align_t>(),
        8usize,
        concat!("Size of: ", stringify!(lzo_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lzo_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lzo_align_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a01 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a02 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a02)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a03 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a03)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a04 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a04)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a05 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a05)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a06 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a06)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a07 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a07)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a08 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a08)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a09 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a09)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lzo_align_t>())).a10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lzo_align_t),
            "::",
            stringify!(a10)
        )
    );
}
extern "C" {
    pub(crate) fn __lzo_align_gap(
        p: *const ::std::os::raw::c_void,
        size: lzo_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union __lzo_pu_u {
    pub(crate) a: *mut ::std::os::raw::c_uchar,
    pub(crate) b: lzo_uint,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___lzo_pu_u() {
    assert_eq!(
        ::std::mem::size_of::<__lzo_pu_u>(),
        8usize,
        concat!("Size of: ", stringify!(__lzo_pu_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__lzo_pu_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__lzo_pu_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__lzo_pu_u>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__lzo_pu_u),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__lzo_pu_u>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__lzo_pu_u),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub(crate) union __lzo_pu32_u {
    pub(crate) a: *mut ::std::os::raw::c_uchar,
    pub(crate) b: ::std::os::raw::c_uint,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___lzo_pu32_u() {
    assert_eq!(
        ::std::mem::size_of::<__lzo_pu32_u>(),
        8usize,
        concat!("Size of: ", stringify!(__lzo_pu32_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__lzo_pu32_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__lzo_pu32_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__lzo_pu32_u>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__lzo_pu32_u),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__lzo_pu32_u>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__lzo_pu32_u),
            "::",
            stringify!(b)
        )
    );
}
extern "C" {
    pub(crate) fn lzo1x_1_compress(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn lzo1x_decompress(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn lzo1x_decompress_safe(
        src: *const ::std::os::raw::c_uchar,
        src_len: lzo_uint,
        dst: *mut ::std::os::raw::c_uchar,
        dst_len: *mut lzo_uint,
        wrkmem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
